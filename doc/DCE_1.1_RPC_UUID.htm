<!-- Copyright 1997 The Open Group, All rights reserved -->
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">


<title>DCE 1.1: Remote Procedure Call - Universal Unique Identifier</title>
</head><body><center><a href="https://pubs.opengroup.org/onlinepubs/9629399/chap14.htm">Previous section.</a></center>
<p>
<basefont size="3">
<!-- CDE 1.1: Remote Procedure Call -->
<basefont size="3">
</p><center>
<font size="2">
CDE 1.1: Remote Procedure Call
<br>
Copyright Â© 1997 The Open Group
</font></center><font size="2">
</font>
<hr size="2" noshade="noshade">
<h2><a name="tagcjh_20"></a>Universal Unique Identifier</h2>
<xref type="1" name="apdxa"></xref>
<index term="UUIDs"></index>
This appendix specifies the syntax and semantics of the DCE variant of
Universal Unique Identifiers (UUIDs).
<p>
A UUID is an identifier that is unique across both space and
time<a href="#tag_foot_1"><sup><small>1</small></sup></a>, with respect to the space of all UUIDs.
A UUID can be used for multiple purposes, from tagging objects
with an extremely short lifetime, to reliably identifying very
persistent objects across a network.
</p><p>
The generation of UUIDs does not require a registration authority for
each single identifier. Instead, it requires a unique value over
space for each UUID generator. This spatially unique value is
specified as an IEEE 802 address, which is usually already applied to
network-connected systems. This 48-bit address can be assigned based
on an address block obtained through the IEEE registration authority.
This UUID specification assumes the availability of an IEEE 802
address.
</p><h3><a name="tagcjh_20_01"></a>Format</h3>
<xref type="2" name="format"></xref>
<index term="UUIDs, format"></index>
<p>
<xref href="tblA-1"><a href="#tagtcjh_34">
UUID Format
</a></xref>
shows the format of a UUID.
<basefont size="2">
</p><p></p><center><p><table cellpadding="3" bordercolor="#000000" border="1" align="center">
<tbody><tr valign="top"><th align="center"><b>Field</b>
</th><th align="center"><b>NDR Data Type</b>
</th><th align="center"><b>Octet #</b>
</th><th align="center"><b>Note</b>
</th></tr><tr valign="top"><th align="left"><b>time_low</b>
</th><th align="left"><b>unsigned long</b>
</th><th align="left">0-3
</th><th align="left">The low field of the timestamp.
</th></tr><tr valign="top"><td align="left"><b>time_mid</b>
</td><td align="left"><b>unsigned short</b>
</td><td align="left">4-5
</td><td align="left">The middle field of the timestamp.
</td></tr><tr valign="top"><td align="left"><b>time_hi_and_version</b>
</td><td align="left"><b>unsigned short</b>
</td><td align="left">6-7
</td><td align="left">The high field of the timestamp multiplexed with the version number.
</td></tr><tr valign="top"><td align="left"><b>clock_seq_hi_and_reserved</b>
</td><td align="left"><b>unsigned small</b>
</td><td align="left">8
</td><td align="left">The high field of the clock sequence multiplexed with the variant.
</td></tr><tr valign="top"><td align="left"><b>clock_seq_low</b>
</td><td align="left"><b>unsigned small</b>
</td><td align="left">9
</td><td align="left">The low field of the clock sequence.
</td></tr><tr valign="top"><td align="left"><b>node</b>
</td><td align="left"><b>character</b>
</td><td align="left">10-15
</td><td align="left">The spatially unique node identifier.
</td></tr></tbody></table>
</p></center>
<basefont size="3">
<b><center><xref table="UUID Format"><a name="tagtcjh_34"></a></xref>Table: UUID Format</center></b>
<xref type="7" name="tblA-1"></xref>
<p>
The UUID consists of a record of 16 octets and must not contain
padding between fields. The total size is 128 bits.
</p><p>
To minimise confusion about bit assignments within octets, the
UUID record definition is defined only in terms of fields that
are integral numbers of octets. The version number is multiplexed with
the time stamp (<b>time_high</b>), and the variant field is multiplexed
with the clock sequence (<b>clock_seq_high</b>).
</p><p>
The timestamp is a 60 bit value. For UUID version 1, this is
represented by Coordinated Universal Time (UTC) as a count of
100-nanosecond intervals since 00:00:00.00, 15 October 1582 (the date
of Gregorian reform to the Christian calendar).
</p><p>
The version number is multiplexed in the 4 most significant bits
of the <b>time_hi_and_version</b> field.
<xref href="tblA-2"><a href="#tagtcjh_35">
UUID version Field
</a></xref>
lists currently defined versions of the UUID.
</p><pre><basefont size="2">
</pre>
<p></p><center><p><table cellpadding="3" bordercolor="#000000" border="1" align="center">
<tbody><tr valign="top"><th align="center"><b>msb1</b>
</th><th align="center"><b>msb2</b>
</th><th align="center"><b>msb3</b>
</th><th align="center"><b>msb4</b>
</th><th align="center"><b>Version</b>
</th><th align="center"><b>Description</b>
</th></tr><tr valign="top"><th align="center">0
</th><th align="center">0
</th><th align="center">0
</th><th align="center">1
</th><th align="center">1
</th><th align="left">DCE version, as specified herein.
</th></tr><tr valign="top"><td align="center">0
</td><td align="center">0
</td><td align="center">1
</td><td align="center">0
</td><td align="center">2
</td><td align="left">DCE Security version, with embedded POSIX UIDs.
</td></tr></tbody></table>
</p></center>
<pre><basefont size="3">
</pre>
<b><center><xref table="UUID version Field"><a name="tagtcjh_35"></a></xref>Table: UUID version Field</center></b>
<xref type="7" name="tblA-2"></xref>
<p>
The variant field determines the layout of the UUID. The structure of
DCE UUIDs is fixed across different versions. Other UUID variants may
not interoperate with DCE UUIDs. Interoperability of UUIDs is defined
as the applicability of operations such as string conversion,
comparison, and lexical ordering across different systems. The
<b>variant</b> field consists of a variable number of the msbs of the
<b>clock_seq_hi_and_reserved</b> field.
<xref href="tblA-3"><a href="#tagtcjh_36">
UUID variant Field
</a></xref>
lists the contents of the DCE variant field.
</p><pre><basefont size="2">
</pre>
<p></p><center><p><table cellpadding="3" bordercolor="#000000" border="1" align="center">
<tbody><tr valign="top"><th align="center"><b>msb1</b>
</th><th align="center"><b>msb2</b>
</th><th align="center"><b>msb3</b>
</th><th align="center"><b>Description</b>
</th></tr><tr valign="top"><th align="center">0
</th><th align="center">-
</th><th align="center">-
</th><th align="left">Reserved, NCS backward compatibility.
</th></tr><tr valign="top"><td align="center">1
</td><td align="center">0
</td><td align="center">-
</td><td align="left">DCE variant.
</td></tr><tr valign="top"><td align="center">1
</td><td align="center">1
</td><td align="center">0
</td><td align="left">Reserved, Microsoft Corporation GUID.
</td></tr><tr valign="top"><td align="center">1
</td><td align="center">1
</td><td align="center">1
</td><td align="left">Reserved for future definition.
</td></tr></tbody></table>
</p></center>
<pre><basefont size="3">
</pre>
<b><center><xref table="UUID variant Field"><a name="tagtcjh_36"></a></xref>Table: UUID variant Field</center></b>
<xref type="7" name="tblA-3"></xref>
<p>
The clock sequence is required to detect potential losses of
monotonicity of the clock. Thus, this value marks discontinuities and
prevents duplicates. An algorithm for generating this value is
outlined in
<xref href="clock_seq"><a href="#tagcjh_20_02_01">
Clock Sequence
</a></xref>.
The clock sequence is encoded in the 6 least significant bits of
the <b>clock_seq_hi_and_reserved</b> field
and in the <b>clock_seq_low</b> field.
</p><p>
The <b>node</b> field consists of the IEEE address, usually the
host address. For systems with multiple IEEE 802 nodes, any available
node address can be used. The lowest addressed octet (octet number
10) contains the global/local bit and the unicast/multicast bit, and
is the first octet of the address transmitted on an 802.3 LAN.
</p><p>
Depending on the network data representation, the multi-octet unsigned
integer fields are subject to byte swapping when communicated between
different endian machines.
</p><p>
The nil UUID is special form of UUID that is specified to
have all 128 bits set to 0 (zero).
</p><h3><a name="tagcjh_20_02"></a>Algorithms for Creating a UUID</h3>
<index term="UUIDs, algorithms for creating"></index>
<p>
Various aspects of the algorithm for creating a UUID are discussed in
the following sections. UUID generation requires a guarantee of
uniqueness within the node ID for a given variant and version.
Interoperability is provided by complying with the specified data
structure. To prevent possible UUID collisions, which could be caused
by different implementations on the same node, compliance with the
algorithms specified here is required.
</p><h4><a name="tagcjh_20_02_01"></a>Clock Sequence</h4>
<xref type="3" name="clock_seq"></xref>
<p>
The clock sequence value must be changed whenever:
</p><ul>
<p>
</p><li>
The UUID generator detects that the local value of UTC has
gone backward; this may be due to normal functioning of the DCE Time
Service.
<p>
</p></li><li>
The UUID generator has lost its state of the last value of
UTC used, indicating that time <i>may</i> have gone backward;
this is typically the case on reboot.
<p>
</p></li></ul>
<p>
While a node is operational, the UUID service always saves the last
UTC used to create a UUID. Each time a new UUID is created, the
current <b>UTC</b> is compared to the saved value and if either the
current value is less (the non-monotonic clock case) or the saved
value was lost, then the <b>clock sequence</b> is incremented modulo
16,384, thus avoiding production of duplicate UUIDs.
</p><p>
The <b>clock sequence</b> must be initialised to a random number to
minimise the correlation across systems. This provides maximum
protection against <b>node</b> identifiers that may move or switch from
system to system rapidly. The initial value <i>shall not</i> be correlated
to the node identifier.
</p><p>
The rule of initialising the <b>clock sequence</b> to a random value is
waived if, and only if all of the following are true:
</p><ol>
<p>
</p><li>
The <b>clock sequence</b> value is stored in a form of non-volatile
storage.
<p>
</p></li><li>
The system is manufactured such that the IEEE address ROM is designed
to be inseparable from the system by either the user or field service,
so that it cannot be moved to another system.
<p>
</p></li><li>
The manufacturing process guarantees that only new IEEE address ROMs
are used.
<p>
</p></li><li>
Any field service, remanufacturing or rebuilding process that could
change the value of the clock sequence must reinitialise it to a
random value.
<p>
</p></li></ol>
<p>
In other words, the system constraints prevent duplicates caused by
possible migration of the IEEE address, while the operational system
itself can protect against non-monotonic clocks, except in the case of
field service intervention. At manufacturing time, such a system may
initialise the clock sequence to any convenient value.
</p><h4><a name="tagcjh_20_02_02"></a>System Reboot</h4>
<p>
There are two possibilities when rebooting a system:
</p><ol>
<p>
</p><li>
The UUID generator state-the last UTC, adjustment, and
clock sequence-of the UUID service has been restored from
non-volatile store.
<p>
</p></li><li>
The state of the last UTC or adjustment has been lost.
<p>
</p></li></ol>
<p>
If the state variables have been restored, the UUID generator just
continues as normal. Alternatively, if the state variables cannot be
restored, they are reinitialised, and the clock sequence is changed.
If the clock sequence is stored in non-volatile store, it is
incremented; otherwise, it is reinitialised to a new random value.
</p><h4><a name="tagcjh_20_02_03"></a>Clock Adjustment</h4>
<p>
UUIDs may be created at a rate greater than the system clock
resolution. Therefore, the system must also maintain an adjustment
value to be added to the lower-order bits of the time. Logically, each
time the system clock ticks, the adjustment value is cleared. Every
time a UUID is generated, the current adjustment value is read and
incremented atomically, then added to the UTC time field of the
UUID.
</p><h4><a name="tagcjh_20_02_04"></a>Clock Overrun</h4>
<p>
The 100 nanosecond granularity of time should prove sufficient even
for bursts of UUID creation in the next generation of high-performance
multiprocessors. If a system overruns the clock adjustment by
requesting too many UUIDs within a single system clock tick, the UUID
service may raise an exception, handled in a system or
process-dependent manner either by:
</p><ul>
<p>
</p><li>
terminating the requester
<p>
</p></li><li>
reissuing the request until it succeeds
<p>
</p></li><li>
stalling the UUID generator until the system clock catches up.
<p>
</p></li></ul>
<p>
If the processors overrun the UUID generation frequently,
additional node identifiers and clocks may need to be added.
</p><h4><a name="tagcjh_20_02_05"></a>UUID Generation</h4>
<p>
UUIDs are generated according to the following algorithm:
</p><ol>
<p>
</p><li>
Determine the values for the UTC-based timestamp and clock sequence to
be used in the UUID.
<xref href="format"><a href="#tagcjh_20_01">
Format
</a></xref>
and
<xref href="clock_seq"><a href="#tagcjh_20_02_01">
Clock Sequence
</a></xref>
define how to determine these values. For the purposes of this
algorithm, consider the
timestamp to be a 60-bit unsigned integer and the clock sequence to be
a 14-bit unsigned integer. Sequentially number the bits in a field,
starting from 0 (zero) for the least significant bit.
<p>
</p></li><li>
Set the <b>time_low</b> field equal to the least significant 32-bits
(bits numbered 0 to 31 inclusive) of the time stamp in the same order of
significance.
If a DCE Security version UUID is being created, then replace the
<b>time_low</b> field with the local user security attribute as defined
by the <b>DCE: Security Services</b> specification.
<p>
</p></li><li>
Set the <b>time_mid</b> field equal to the bits numbered 32 to 47 inclusive 
of the time stamp in the same order of significance.
<p>
</p></li><li>
Set the 12 least significant bits (bits numbered 0 to 11 inclusive) of the
<b>time_hi_and_version</b> field equal to the bits numbered 48 to
59 inclusive of the time stamp in the same order of significance.
<p>
</p></li><li>
Set the 4 most significant bits (bits numbered 12 to 15 inclusive) of the
<b>time_hi_and_version</b> field to the 4-bit version number
corresponding to the UUID version being created, as shown in
<xref href="tblA-2"><a href="#tagtcjh_35">
UUID version Field
</a></xref>.
<p>
</p></li><li>
Set the <b>clock_seq_low</b> field to the 8 least significant bits
(bits numbered 0 to 7 inclusive) of the <b>clock sequence</b> in the same
order of significance.
<p>
</p></li><li>
Set the 6 least significant bits (bits numbered 0 to 5 inclusive) of the
<b>clock_seq_hi_and_reserved</b> field to the 6 most significant bits
(bits numbered 8 to 13 inclusive) of the <b>clock sequence</b> in the same
order of significance.
<br>
<p>
</p></li><li>
Set the 2 most significant bits (bits numbered 6 and 7) of the
<b>clock_seq_hi_and_reserved</b> field as shown in
<xref href="tblA-4"><a href="#tagtcjh_37">
The 2 msb of clock_seq_hi_and_reserved
</a></xref>.
<pre><basefont size="2">
</pre>
<p></p><center><p><table cellpadding="3" bordercolor="#000000" border="1" align="center">
<tbody><tr valign="top"><th align="center"><b>Bit 7</b>
</th><th align="center"><b>Bit 6</b>
</th></tr><tr valign="top"><th align="center">1
</th><th align="center">0
</th></tr></tbody></table>
</p></center>
<pre><basefont size="3">
</pre>
<b><center><xref table="The 2 msb of clock_seq_hi_and_reserved"><a name="tagtcjh_37"></a></xref>Table: The 2 msb of clock_seq_hi_and_reserved</center></b>
<xref type="7" name="tblA-4"></xref>
<p>
</p></li><li>
Set the <b>node</b> field to the 48-bit IEEE address in the same order
of significance as the address.
<p>
</p></li></ol>
<index term="UUIDs, algorithms for creating"></index>
<h3><a name="tagcjh_20_03"></a>String Representation of UUIDs</h3>
<index term="UUIDs, string representation"></index>
<p>
For use in human readable text, a UUID string representation is
specified as a sequence of fields, some of which are separated by
single dashes.
</p><p>
Each field is treated as an integer and has its value printed as a
zero-filled hexadecimal digit string with the most significant digit
first. The hexadecimal values a to f inclusive are output as lower case
characters, and are case insensitive on input. The sequence is the
same as the UUID constructed type.
</p><p>
The formal definition of the UUID string representation is
provided by the following extended BNF:
<code>
</code></p><pre><code><tt>UUID                   = &lt;time_low&gt; &lt;hyphen&gt; &lt;time_mid&gt; &lt;hyphen&gt;
                         &lt;time_high_and_version&gt; &lt;hyphen&gt; 
                         &lt;clock_seq_and_reserved&gt;
                         &lt;clock_seq_low&gt; &lt;hyphen&gt; &lt;node&gt;
time_low               = &lt;hexOctet&gt; &lt;hexOctet&gt; &lt;hexOctet&gt; &lt;hexOctet&gt;
time_mid               = &lt;hexOctet&gt; &lt;hexOctet&gt;
time_high_and_version  = &lt;hexOctet&gt; &lt;hexOctet&gt;
clock_seq_and_reserved = &lt;hexOctet&gt;
clock_seq_low          = &lt;hexOctet&gt;
node                   = &lt;hexOctet&gt;&lt;hexOctet&gt;&lt;hexOctet&gt;
                         &lt;hexOctet&gt;&lt;hexOctet&gt;&lt;hexOctet&gt;
hexOctet               = &lt;hexDigit&gt; &lt;hexDigit&gt;
hexDigit               = &lt;digit&gt; | &lt;a&gt; | &lt;b&gt; | &lt;c&gt; | &lt;d&gt; | &lt;e&gt; | &lt;f&gt;
digit                  = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
                         "8" | "9"
hyphen                 = "-"
a                      = "a" | "A"
b                      = "b" | "B"
c                      = "c" | "C"
d                      = "d" | "D"
e                      = "e" | "E"
f                      = "f" | "F"
</tt></code><tt>
</tt></pre><tt>
</tt><p>
The following is an example of the string representation of a UUID:
<code>
</code></p><pre><code><tt>2fac1234-31f8-11b4-a222-08002b34c003
</tt></code><tt>
</tt></pre><tt>
</tt><h3><a name="tagcjh_20_04"></a>Comparing UUIDs</h3>
<index term="UUIDs, comparing"></index>
<p>
<xref href="tblA-5"><a href="#tagtcjh_38">
Field Order and Type
</a></xref>
lists the UUID fields in order of significance, from most
significant to least significant, for purposes of UUID comparison.
The table also shows the data types applicable to the fields.
</p><pre><basefont size="2">
</pre>
<p></p><center><p><table cellpadding="3" bordercolor="#000000" border="1" align="center">
<tbody><tr valign="top"><th align="center"><b>Field</b>
</th><th align="center"><b>Type</b>
</th></tr><tr valign="top"><th align="left"><b>time_low</b>
</th><th align="left">Unsigned 32-bit integer
</th></tr><tr valign="top"><td align="left"><b>time_mid</b>
</td><td align="left">Unsigned 16-bit integer
</td></tr><tr valign="top"><td align="left"><b>time_hi_and_version</b>
</td><td align="left">Unsigned 16-bit integer
</td></tr><tr valign="top"><td align="left"><b>clock_seq_hi_and_reserved</b>
</td><td align="left">Unsigned 8-bit integer
</td></tr><tr valign="top"><td align="left"><b>clock_seq_low</b>
</td><td align="left">Unsigned 8-bit integer
</td></tr><tr valign="top"><td align="left"><b>node</b>
</td><td align="left">Unsigned 48-bit integer
</td></tr></tbody></table>
</p></center>
<pre><basefont size="3">
</pre>
<b><center><xref table="Field Order and Type"><a name="tagtcjh_38"></a></xref>Table: Field Order and Type</center></b>
<xref type="7" name="tblA-5"></xref>
<p>
Consider each field to be an unsigned integer as shown in
<xref href="tblA-5"><a href="#tagtcjh_38">
Field Order and Type
</a></xref>.
To compare a pair of UUIDs, arithmetically compare the corresponding
fields from each UUID in order of significance and according to their
data type. Two UUIDs are equal if and only if all the
corresponding fields are equal. The first of two UUIDs follows
the second if the most significant field in which the UUIDs differ is
greater for the first UUID. The first of a pair of UUIDs precedes the
second if the most significant field in which the UUIDs differ is
greater for the second UUID.
<index term="UUIDs"></index>
</p><p>
</p><hr>
<p>
</p><h4><a name="tagcjh_20_04_01"></a>Footnotes</h4><p></p><dl compact="compact">
<p></p><dt><a name="tag_foot_1">1.</a></dt><dd>To be precise, the UUID consists of a finite bit space. Thus the time
value used for constructing a UUID is limited and will roll over in
the future (approximately at A.D. 3400, based on the specified
algorithm). 
</dd></dl><p></p><hr>
<basefont size="2">
<blockquote>
Please note that the html version of this specification
may contain formatting aberrations. The definitive version
is available as an <i>electronic publication</i> on CD-ROM
from The Open Group.
</blockquote>
<font size="3">
<p></p><center><table cellspacing="12" border="0"><tbody><tr>
<td align="left"><a href="https://pubs.opengroup.org/onlinepubs/9629399/toc.htm">Contents</a>
</td><td align="center"><a href="https://pubs.opengroup.org/onlinepubs/9629399/apdxb.htm">Next&nbsp;section</a>
</td><td align="right"><a href="https://pubs.opengroup.org/onlinepubs/9629399/docix.htm">Index</a></td></tr></tbody></table></center>

</font></body></html>